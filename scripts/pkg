#!/usr/bin/env bash
set -euo pipefail

# pkg: Unified package management for JupyterLab kernels
# Usage: pkg <command> [args...]

COMMAND="${1:-help}"

show_help() {
    echo "üì¶ JupyterLab Multi-Kernel Package Manager"
    echo "=========================================="
    echo ""
    echo "Usage: pkg <command> [args...]"
    echo ""
    echo "Commands:"
    echo "  install <package> [kernel]    Install package"
    echo "  list [kernel]                 List installed packages"
    echo "  kernels                       List available kernels"
    echo "  help                          Show this help"
    echo ""
    echo "Kernel types:"
    echo "  python, node, go, kotlin, cpp, system, all (default)"
    echo ""
    echo "Examples:"
    echo "  pkg install numpy python"
    echo "  pkg install lodash node"
    echo "  pkg install org.jetbrains.kotlinx:kotlinx-datetime:0.7.1 kotlin"
    echo "  pkg install matplotlib        # Auto-detect kernel"
    echo "  pkg list python"
    echo "  pkg kernels"
}

install_package() {
    local package_name="${1:-}"
    local kernel_type="${2:-all}"
    
    if [[ -z "$package_name" ]]; then
        echo "‚ùå Package name required"
        echo "Usage: pkg install <package> [kernel_type]"
        exit 1
    fi
    
    echo "üîß Installing package '$package_name' for kernel: $kernel_type"
    
    case "$kernel_type" in
        "python")
            echo "üì¶ Installing Python package: $package_name"
            if command -v pip >/dev/null 2>&1; then
                pip install --no-cache-dir "$package_name"
                echo "‚úÖ Python package installed"
            else
                echo "‚ùå pip not found"
                return 1
            fi
            ;;
        "node"|"js"|"javascript"|"typescript"|"ts")
            echo "üì¶ Installing Node.js package: $package_name"
            if command -v npm >/dev/null 2>&1; then
                npm install -g "$package_name"
                echo "‚úÖ Node.js package installed"
            else
                echo "‚ùå npm not found"
                return 1
            fi
            ;;
        "go"|"golang")
            echo "üì¶ Installing Go package: $package_name"
            if command -v go >/dev/null 2>&1; then
                GOBIN=/usr/local/bin go install "$package_name@latest"
                echo "‚úÖ Go package installed"
            else
                echo "‚ùå go not found"
                return 1
            fi
            ;;
        "kotlin"|"kt")
            echo "üì¶ Kotlin dependency: $package_name"
            echo "‚ÑπÔ∏è  Add to your Kotlin notebook:"
            echo "   @file:DependsOn(\"$package_name\")"
            echo ""
            echo "   Or use USE block:"
            echo "   USE { dependencies { implementation(\"$package_name\") } }"
            echo "‚úÖ Instructions provided"
            ;;
        "cpp"|"c++"|"cxx")
            echo "üì¶ Installing C++ package: $package_name"
            if command -v micromamba >/dev/null 2>&1; then
                micromamba install -y -r /opt/conda -n base -c conda-forge "$package_name"
                echo "‚úÖ C++ package installed"
            else
                echo "‚ùå micromamba not found"
                return 1
            fi
            ;;
        "system"|"apt"|"debian")
            echo "üì¶ Installing system package: $package_name"
            if command -v apt-get >/dev/null 2>&1; then
                apt-get update && apt-get install -y --no-install-recommends "$package_name"
                echo "‚úÖ System package installed"
            else
                echo "‚ùå apt-get not found"
                return 1
            fi
            ;;
        "all")
            echo "üîÑ Auto-detecting kernel for: $package_name"
            local success=false
            
            # Try Python first (most common)
            if pip install --no-cache-dir "$package_name" 2>/dev/null; then
                echo "‚úÖ Installed for Python"
                success=true
            fi
            
            # Try Node.js for packages with common JS patterns
            if [[ "$package_name" =~ ^[@a-z] ]] || [[ "$package_name" =~ - ]]; then
                if npm install -g "$package_name" 2>/dev/null; then
                    echo "‚úÖ Installed for Node.js"
                    success=true
                fi
            fi
            
            # Try Go for packages with domain patterns
            if [[ "$package_name" =~ ^[a-z]+\.[a-z]+/ ]]; then
                if GOBIN=/usr/local/bin go install "$package_name@latest" 2>/dev/null; then
                    echo "‚úÖ Installed for Go"
                    success=true
                fi
            fi
            
            # Try Kotlin for Maven coordinates
            if [[ "$package_name" =~ ^[a-z]+(\.[a-z]+)*:[a-z]+ ]]; then
                echo "‚úÖ Kotlin instructions provided"
                echo "   Add to notebook: @file:DependsOn(\"$package_name\")"
                success=true
            fi
            
            if [[ "$success" != "true" ]]; then
                echo "‚ùå Could not determine kernel. Try specifying: pkg install $package_name <kernel>"
                exit 1
            fi
            ;;
        *)
            echo "‚ùå Unknown kernel: $kernel_type"
            echo "Available: python, node, go, kotlin, cpp, system, all"
            exit 1
            ;;
    esac
    
    echo "üéâ Installation completed!"
}

list_packages() {
    local kernel_type="${1:-all}"
    
    echo "üìã Packages for kernel: $kernel_type"
    echo "=================================="
    
    case "$kernel_type" in
        "python")
            echo ""
            echo "üêç Python packages:"
            if command -v pip >/dev/null 2>&1; then
                pip list --format=columns
            else
                echo "‚ùå pip not found"
            fi
            ;;
        "node"|"js"|"javascript"|"typescript"|"ts")
            echo ""
            echo "üì¶ Node.js packages:"
            if command -v npm >/dev/null 2>&1; then
                npm list -g --depth=0 2>/dev/null || echo "No global packages"
            else
                echo "‚ùå npm not found"
            fi
            ;;
        "go"|"golang")
            echo ""
            echo "üêπ Go binaries:"
            find /usr/local/bin -type f -executable | grep -v "^/usr/local/bin/\(pkg\|install\|list\|start\)" | sort || echo "No Go binaries found"
            ;;
        "kotlin"|"kt")
            echo ""
            echo "üéØ Kotlin packages:"
            echo "‚ÑπÔ∏è  Managed per-notebook with @file:DependsOn() or USE blocks"
            echo "üìñ Popular libraries: kotlinx-datetime, kotlinx-coroutines, ktor-client"
            echo "   Integrated: %use dataframe, %use kandy, %use ktor-client"
            ;;
        "cpp"|"c++"|"cxx")
            echo ""
            echo "‚ö° C++ packages:"
            if command -v micromamba >/dev/null 2>&1; then
                micromamba list -r /opt/conda -n base
            else
                echo "‚ùå micromamba not found"
            fi
            ;;
        "system"|"apt"|"debian")
            echo ""
            echo "üñ•Ô∏è  Recent system packages:"
            if command -v dpkg >/dev/null 2>&1; then
                dpkg -l | grep "^ii" | tail -10
            else
                echo "‚ùå dpkg not found"
            fi
            ;;
        "kernels")
            echo ""
            echo "üî¨ Available Jupyter kernels:"
            if command -v jupyter >/dev/null 2>&1; then
                jupyter kernelspec list
            else
                echo "‚ùå jupyter not found"
            fi
            ;;
        "all")
            list_packages kernels
            list_packages python
            list_packages node
            list_packages go
            list_packages kotlin
            list_packages cpp
            ;;
        *)
            echo "‚ùå Unknown kernel: $kernel_type"
            echo "Available: python, node, go, kotlin, cpp, system, kernels, all"
            exit 1
            ;;
    esac
}

case "$COMMAND" in
    "install"|"add"|"i")
        shift
        install_package "$@"
        ;;
    "list"|"ls"|"l")
        shift
        list_packages "$@"
        ;;
    "kernels"|"k")
        list_packages kernels
        ;;
    "help"|"h"|"-h"|"--help")
        show_help
        ;;
    *)
        echo "‚ùå Unknown command: $COMMAND"
        echo ""
        show_help
        exit 1
        ;;
esac 