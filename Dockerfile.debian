FROM debian:12-slim

ENV DEBIAN_FRONTEND=noninteractive

# SO + ferramentas mínimas
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates curl bash git vim tmux tini gosu \
    python3 python3-venv python3-pip python3-dev \
    gcc g++ make \
    openjdk-17-jdk-headless \
    libpq-dev postgresql-client \
    golang-go
 #&& rm -rf /var/lib/apt/lists/*

# Node LTS para tslab
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - \
 && apt-get update && apt-get install -y --no-install-recommends nodejs \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /root/work

# Python em venv (foge do PEP 668) + Jupyter
RUN python3 -m venv /opt/venv
ENV PATH=/opt/venv/bin:$PATH

# JupyterLab + kernels Python-side
RUN pip install --no-cache-dir --upgrade pip wheel setuptools && \
    pip install --no-cache-dir \
      jupyterlab jupyter-console jupyter_client \
      bash_kernel kotlin-jupyter-kernel \
      tabulate psycopg2-binary \
      jupyterlab_execute_time

# >>>>>>> BLOCO NOVO: symlinks para o binário do Jupyter ficar no PATH global <<<<<<<
RUN ln -sf /opt/venv/bin/jupyter         /usr/local/bin/jupyter      && \
    ln -sf /opt/venv/bin/jupyter-lab     /usr/local/bin/jupyter-lab  && \
    ln -sf /opt/venv/bin/jupyter-console /usr/local/bin/jupyter-console
# >>>>>>> FIM DO BLOCO NOVO <<<<<<<

# Registrar kernels (no sys-prefix do venv)
RUN python -m bash_kernel.install --sys-prefix && \
    python -m kotlin_kernel add-kernel && \
    pip install --no-cache-dir --no-build-isolation --no-deps postgres_kernel && \
    python -m postgres_kernel install --sys-prefix

# Ansible kernel
RUN pip install --no-cache-dir ansible-kernel && \
    python -m ansible_kernel.install --sys-prefix

# JS/TS via tslab (global)
RUN npm install -g tslab && \
    JUPYTER_DATA_DIR=/usr/local/share/jupyter tslab install --python=/opt/venv/bin/python

# Go (gophernotes) — binário global + kernelspec global
ENV GOBIN=/usr/local/bin
RUN go install github.com/gopherdata/gophernotes@latest && \
    test -x /usr/local/bin/gophernotes && \
    mkdir -p /usr/local/share/jupyter/kernels/gophernotes && \
    printf '{\n  "argv": ["/usr/local/bin/gophernotes", "{connection_file}"],\n  "display_name": "Go (gophernotes)",\n  "language": "go",\n  "codemirror_mode": "go"\n}\n' \
      > /usr/local/share/jupyter/kernels/gophernotes/kernel.json

# ===================== C++17 via xeus-cling (micromamba) ======================
ENV MAMBA_ROOT_PREFIX=/opt/conda
RUN apt-get update && apt-get install -y --no-install-recommends bzip2 && rm -rf /var/lib/apt/lists/* && \
    mkdir -p /opt/conda && \
    curl -L https://micro.mamba.pm/api/micromamba/linux-64/latest \
      | tar -xj -C /usr/local/bin bin/micromamba --strip-components=1 && \
    /usr/local/bin/micromamba install -y -r /opt/conda -n base -c conda-forge xeus-cling && \
    /usr/local/bin/micromamba clean -a -y

# Copia APENAS o kernelspec de C++17 e ajusta kernel.json para usar /opt/conda/bin/xcpp
RUN set -eux; \
    ksroot="/opt/conda/share/jupyter/kernels"; \
    dest="/usr/local/share/jupyter/kernels/xcpp17"; \
    mkdir -p "${dest}"; \
    # tenta achar a pasta de cpp17 com nomes comuns
    for name in xcpp17 xeus-cling-cpp17 cpp17; do \
      if [ -d "${ksroot}/${name}" ]; then src="${ksroot}/${name}"; break; fi; \
    done; \
    cp -r "${src}/"* "${dest}/"; \
    python3 - <<'PY'
from pathlib import Path
import json
p = Path("/usr/local/share/jupyter/kernels/xcpp17/kernel.json")
j = json.loads(p.read_text())
# chama o binário real do xeus-cling (não existe xcpp17, o correto é xcpp)
j["argv"] = ["/opt/conda/bin/xcpp", "-f", "{connection_file}"]
env = j.get("env", {})
env.setdefault("LD_LIBRARY_PATH", "/opt/conda/lib")
j["env"] = env
p.write_text(json.dumps(j, indent=2))
PY

# Tema escuro padrão para o usuário
RUN mkdir -p /root/.jupyter/lab/user-settings/@jupyterlab/apputils-extension && \
    printf '{ "theme": "JupyterLab Dark" }\n' \
      > /root/.jupyter/lab/user-settings/@jupyterlab/apputils-extension/themes.jupyterlab-settings

# ===================== Elyra - AI-centric JupyterLab extensions ======================
# Install Elyra core (includes local pipeline runtime, visual editor, code snippets)
# Use elyra[kfp] or elyra[airflow] if you need remote pipeline execution
RUN pip install --no-cache-dir elyra && \
    jupyter server extension enable elyra

# ===================== Jupyter Scheduler - Schedule notebooks from UI ======================
# Provides GUI for scheduling notebooks without needing Airflow/Kubernetes
RUN pip install --no-cache-dir jupyter-scheduler && \
    jupyter server extension enable jupyter_scheduler

# Package management script
COPY scripts/pkg /usr/local/bin/pkg
RUN chmod +x /usr/local/bin/pkg

# Script de start: corrige permissões do bind e troca
COPY start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh

# --- Python venv isolated from Debian's system Python (PEP 668 safe)
RUN python3 -m venv /opt/venv && \
    /opt/venv/bin/python -m ensurepip --upgrade && \
    /opt/venv/bin/python -m pip install --upgrade --no-cache-dir pip setuptools wheel

# Make venv tools unambiguous everywhere
ENV VIRTUAL_ENV=/opt/venv
ENV PATH=/opt/venv/bin:$PATH
RUN ln -sf /opt/venv/bin/python /usr/local/bin/python && \
    ln -sf /opt/venv/bin/pip    /usr/local/bin/pip

ENV SHELL=/bin/bash
ENTRYPOINT ["/usr/bin/tini","-g","--","/usr/local/bin/start.sh"]
CMD ["jupyter","lab","--ip=0.0.0.0","--port=8888","--no-browser","--ServerApp.token=","--ServerApp.password=", "--allow-root"]
